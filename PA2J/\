/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;

%%

%{

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

	private int block_comment_depth = 0;
    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }
%}

%init{

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
%init}

%eofval{

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yy_lexical_state) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	/* If necessary, add code for other states here, e.g:
	   case COMMENT:
	   ...
	   break;
	*/
	case STRING:
	return new Symbol(TokenConstants.ERROR, "EOF in string constant");
	case LINECOM:
	return new Symbol(TokenConstants.ERROR, "EOF in comment");
	case BLOCKCOM:
	return new Symbol(TokenConstants.ERROR, "EOF in comment");
    }
    return new Symbol(TokenConstants.EOF);
%eofval}

%class CoolLexer
%cup

DIGIT   = [0-9]
LLETTER = [a-z]
ULETTER = [A-Z]
LETTER  = [a-zA-Z]
INT     = {DIGIT}+
FLOAT   = {INT}(\.{INT}+)?
WSPACE  = [ \n\f\r\t\v]

%state LINECOM, BLOCKCOM, STRING

%%

<STRING>[^"\n]*["\n]                    { 
											String _t = yytext(); 
											if (_t.endsWith("\\\"") || _t.endsWith("\\\n") 
													|| _t.endswith("\\\n\r"))
												yymore();
											else if (_t.endsWith("\n") || _t.endswith("\n\r"))
												return new Symbol(TokenConstants.ERROR, 
														"Unterminated string constant");
											else {
												_t.replaceAll("\\(.)", "\1");
												yybegin(YYINITIAL);
												return new Symbol(TokenConstants.STR_CONST, _t);
											}
                                        }

<LINECOM>[^\n]*\n                       yybegin(YYINITIAL);
<BLOCKCOM>\(\*                          block_comment_depth++;
<BLOCKCOM>\*\)                          { 
											if (--block_comment_depth <= 0) 
												yybegin(YYINITIAL);
										}

<YYINITIAL>{WSPACE}+                    {  }
<YYINITIAL>\"                           yybegin(STRING);
<YYINITIAL>--                           yybegin(LINECOM);
<YYINITIAL>\(\*                         { 
											block_comment_depth = 1;
											yybegin(BLOCKCOM); 
										}
<YYINITIAL>\*\)                         return new Symbol(TokenConstants.ERROR, "Unmatched *)");
<YYINITIAL>{INT}						return new Symbol(TokenConstants.INT_CONST, yytext());
<YYINITIAL>t[rR][uU][eE]        		return new Symbol(TokenConstants.BOOL_CONST, new BoolConst(true));
<YYINITIAL>f[aA][lL][sS][eE]    		return new Symbol(TokenConstants.BOOL_CONST, new BoolConst(false));
<YYINITIAL>[iI][fF]                     return new Symbol(TokenConstants.IF);
<YYINITIAL>[fF][iI]                     return new Symbol(TokenConstants.FI);
<YYINITIAL>[eE][lL][sS][eE]             return new Symbol(TokenConstants.ELSE);
<YYINITIAL>[tT][hH][eE][nN]             return new Symbol(TokenConstants.THEN);
<YYINITIAL>[wW][hH][iI][lL][eE]         return new Symbol(TokenConstants.WHILE);
<YYINITIAL>[A-Z][_a-zA-Z0-9]*           return new Symbol(TokenConstants.TYPEID);
<YYINITIAL>[_a-z][_a-zA-Z0-9]*          return new Symbol(TokenConstants.OBJECTID);
<YYINITIAL>";"							return new Symbol(TokenConstants.SEMI);
<YYINITIAL>"{"							return new Symbol(TokenConstants.LBRACE);
<YYINITIAL>"}"							return new Symbol(TokenConstants.RBRACE);
<YYINITIAL>"("							return new Symbol(TokenConstants.LPAREN);
<YYINITIAL>")"							return new Symbol(TokenConstants.RPAREN);
<YYINITIAL>"+"							return new Symbol(TokenConstants.PLUS);
<YYINITIAL>"-"							return new Symbol(TokenConstants.MINUS);
<YYINITIAL>"*"							return new Symbol(TokenConstants.MULT);
<YYINITIAL>"/"							return new Symbol(TokenConstants.DIV);
<YYINITIAL>","							return new Symbol(TokenConstants.COMMA);
<YYINITIAL>"=>"			                { /* Sample lexical rule for "=>" arrow.
                                             Further lexical rules should be defined
                                             here, after the last %% separator */
                                             return new Symbol(TokenConstants.DARROW); }

.                                       { /* This rule should be the very last
                                             in your lexical specification and
                                             will match match everything not
                                             matched by other lexical rules. */
                                             System.err.println("LEXER BUG - UNMATCHED: " + yytext()); }
