/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Features dummy_feature_list;
nonterminal Feature attr, method;
nonterminal Cases branch_list;
nonterminal Case branch;
nonterminal Expressions expr_list, actual_list;
nonterminal Expression assign, block, bool_const, comp, cond, dispatch, divide, eq, int_const, 
			isvoid, leq, let, loop, lt, mul, neg, new_, no_expr, object, plus, static_dispatch,
			string_const, sub, typcase, let_inner, any_expr;

/* Precedence declarations go here. */
precedence left ASSIGN;
precedence left NOT;
precedence left LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error
	;

formal
	::= OBJECTID:o COLON TYPEID:t
		{: RESULT = new formalc(curr_lineno(), o, t); :}
	;

formal_list
	::= /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:f
		{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	| formal_list:fl COMMA error
		{: RESULT = fl; :}
	| error COMMA
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| attr:f
	    {: RESULT = new Features(curr_lineno()).appendElement(f); :}
	| method:f
	    {: RESULT = new Features(curr_lineno()).appendElement(f); :}
	| dummy_feature_list:fl attr:f
	    {: RESULT = fl.appendElement(f); :}
	| dummy_feature_list:fl method:f
	    {: RESULT = fl.appendElement(f); :}
	;

attr
	::= OBJECTID:o COLON TYPEID:t SEMI
		{: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); :}
	| OBJECTID:o COLON TYPEID:t ASSIGN any_expr:a SEMI
		{: RESULT = new attr(curr_lineno(), o, t, a); :}
	;

method
	::= OBJECTID:o LPAREN formal_list:f RPAREN COLON TYPEID:t LBRACE any_expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), o, f, t, e); :}
	| error LPAREN formal_list:f RPAREN COLON TYPEID:t LBRACE any_expr:e RBRACE SEMI
	;

/* Expressions */
any_expr
	::= assign:e {: RESULT = e; :}
	| dispatch:e {: RESULT = e; :}
	| static_dispatch:e {: RESULT = e; :}
	| cond:e {: RESULT = e; :}
	| loop:e {: RESULT = e; :}
	| typcase:e {: RESULT = e; :}
	| block:e {: RESULT = e; :}
	| let:e {: RESULT = e; :}
	| plus:e {: RESULT = e; :}
	| sub:e {: RESULT = e; :}
	| mul:e {: RESULT = e; :}
	| divide:e {: RESULT = e; :}
	| neg:e {: RESULT = e; :}
	| lt:e {: RESULT = e; :}
	| eq:e {: RESULT = e; :}
	| leq:e {: RESULT = e; :}
	| comp:e {: RESULT = e; :}
	| int_const:e {: RESULT = e; :}
	| bool_const:e {: RESULT = e; :}
	| string_const:e {: RESULT = e; :}
	| new_:e {: RESULT = e; :}
	| isvoid:e {: RESULT = e; :}
	| object:e {: RESULT = e; :}
	| LPAREN any_expr:e RPAREN {: RESULT = e; :} 
	| error;

actual_list
	::= any_expr:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| actual_list:al COMMA any_expr:e
		{: RESULT = al.appendElement(e); :}
	| actual_list:al COMMA error
		{: RESULT = al; :}
	| error COMMA
	;

expr_list
	::= any_expr:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| expr_list:el SEMI any_expr:e
		{: RESULT = el.appendElement(e); :}
	| error
	;

block
	::= LBRACE expr_list:el RBRACE
		{: RESULT = new block(curr_lineno(), el); :}
	| LBRACE expr_list:el SEMI RBRACE
		{: RESULT = new block(curr_lineno(), el); :}
	| error
	;

object
	::= OBJECTID:o
		{: RESULT = new object(curr_lineno(), o); :}
	;

bool_const
	::= BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	;

int_const
	::= INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
	;

string_const
	::= STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}
	;

new_
	::= NEW TYPEID:t
		{: RESULT = new new_(curr_lineno(), t); :}
	;

isvoid
	::= ISVOID any_expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	;

comp
	::= NOT any_expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	;

neg
	::= NEG any_expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	;

eq
	::= any_expr:e1 EQ any_expr:e2
		{: RESULT = new eq(curr_lineno(), e1, e2); :}
	;

lt
	::= any_expr:e1 LT any_expr:e2
		{: RESULT = new lt(curr_lineno(), e1, e2); :}
	;
	
leq
	::= any_expr:e1 LE any_expr:e2
		{: RESULT = new leq(curr_lineno(), e1, e2); :}
	;

plus
	::= any_expr:e1 PLUS any_expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2); :}
	;

sub
	::= any_expr:e1 MINUS any_expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2); :}
	;

mul
	::= any_expr:e1 MULT any_expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2); :}
	;

divide
	::= any_expr:e1 DIV any_expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2); :}
	;

assign
	::= OBJECTID:o ASSIGN any_expr:e
		{: RESULT = new assign(curr_lineno(), o, e); :}
	;

dispatch
	::= any_expr:e1 DOT OBJECTID:o LPAREN RPAREN
		{: RESULT = new dispatch(curr_lineno(), e1, o, new Expressions(curr_lineno())); :}
	| any_expr:e1 DOT OBJECTID:o LPAREN actual_list:al RPAREN
		{: RESULT = new dispatch(curr_lineno(), e1, o, al); :}
	| OBJECTID:o LPAREN RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), TreeConstants.self), o, new Expressions(curr_lineno())); :}
	| OBJECTID:o LPAREN actual_list:al RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), TreeConstants.self), o, al); :}
	;

static_dispatch
	::= any_expr:e1 AT TYPEID:t DOT OBJECTID:o LPAREN RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e1, t, o, new Expressions(curr_lineno())); :}
	| any_expr:e1 AT TYPEID:t DOT OBJECTID:o LPAREN actual_list:al RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e1, t, o, al); :}
	;

cond
	::= IF any_expr:e1 THEN any_expr:e2 ELSE any_expr:e3 FI
		{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	| IF any_expr:e1 THEN any_expr:e2 FI
		{: RESULT = new cond(curr_lineno(), e1, e2, new no_expr(curr_lineno())); :}
	;

branch
	::= OBJECTID:o COLON TYPEID:t DARROW any_expr:e SEMI
		{: RESULT = new branch(curr_lineno(), o, t, e); :}
	;

branch_list
	::= branch:b
		{: RESULT = new Cases(curr_lineno()).appendElement(b); :}
	| branch_list:bl branch:b
		{: RESULT = bl.appendElement(b); :}
	;

typcase
	::= CASE any_expr:e OF branch_list:bl ESAC
		{: RESULT = new typcase(curr_lineno(), e, bl); :}
	;

loop
	::= WHILE any_expr:e1 LOOP any_expr:e2 POOL
		{: RESULT = new loop(curr_lineno(), e1, e2); :}
	;

let
	::= LET OBJECTID:o COLON TYPEID:t IN any_expr:e
		{: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e); :}
	| LET OBJECTID:o COLON TYPEID:t ASSIGN any_expr:a IN any_expr:e
		{: RESULT = new let(curr_lineno(), o, t, a, e); :}
	| LET OBJECTID:o COLON TYPEID:t let_inner:l
		{: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), l); :}
	| LET OBJECTID:o COLON TYPEID:t ASSIGN any_expr:a let_inner:l
		{: RESULT = new let(curr_lineno(), o, t, a, l); :}
	;

let_inner
	::= COMMA OBJECTID:o COLON TYPEID:t let_inner:l
		{: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), l); :}
	| COMMA OBJECTID:o COLON TYPEID:t ASSIGN any_expr:a let_inner:l
		{: RESULT = new let(curr_lineno(), o, t, a, l); :}
	| COMMA OBJECTID:o COLON TYPEID:t IN any_expr:e
		{: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e); :}
	| COMMA OBJECTID:o COLON TYPEID:t ASSIGN any_expr:a IN any_expr:e
		{: RESULT = new let(curr_lineno(), o, t, a, e); :}
	;
